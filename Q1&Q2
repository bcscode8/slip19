Q1
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <dirent.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>

void  mk_token(char *s, char *tok[])
{
int i = 0;
char *p;
p = strtok(s, " ");
while (p != NULL)
{
tok[i++] = p;
p = strtok(NULL, " ");
}
tok[i] = NULL;
}

void count(char *fn, char op)
{
int fh, cc = 0, wc = 0, lc = 0;
char c;
fh = open(fn, O_RDONLY);
if (fh == -1)
{
printf("File %s is Not Found!!\n", fn);
return;
}
while (read(fh, &c, 1) > 0)
{
if (c == ' ')
wc++;
else if (c == '\n')
{
wc++;
lc++;
}
cc++;
}
close(fh);
switch (op)
{
case 'c':
printf("No. of characters = %d\n", cc);
break;
case 'w':
printf("No. of words = %d\n", wc);
break;
case 'l':
printf("No. of lines = %d\n", lc);
break;
default:
printf("Bad Command!!");
break;
}
}

void typeline(char *fn, char *op)
{
int fh, i = 0, j = 0, n;
char c;
fh = open(fn, O_RDONLY);
if (fh == -1)
{
printf("File %s is Not Found!!\n", fn);
return;
}

if (strcmp(op, "a") == 0)
{
while (read(fh, &c, 1) > 0)
{
printf("%c", c);
}
}

n = atoi(op);
if (n > 0)
{
while (read(fh, &c, 1) > 0)
{
printf("%c", c);
if (c == '\n')
i++;
if (i == n)
break;
}
close(fh);
return;
}

if (n < 0)
{
while (read(fh, &c, 1) > 0)
{
if (c == '\n')
i++;
}
lseek(fh, 0, SEEK_SET);
while (read(fh, &c, 1) > 0)
{
if (c == '\n')
j++;
if (i == j - n)
break;
}
while (read(fh, &c, 1) > 0)
{
printf("%c", c);
}
}
close(fh);
}

void list(char *dn, char op)
{
DIR *dp;
struct dirent *entry;
int dc = 0, fc = 0;
dp = opendir(dn);
if (dp == NULL)
{
printf("Directory %s is Not Found!!\n", dn);
return;
}
switch (op)
{
case 'f':
while (entry = readdir(dp))
{
if (entry->d_type == DT_REG)
printf("%s\n", entry->d_name);
}
break;
case 'n':
while (entry = readdir(dp))
{
if (entry->d_type == DT_DIR)
dc++;
if (entry->d_type == DT_REG)
fc++;
}
printf("DIR = %d\nFiles = %d\n", dc, fc);
break;
case 'i':
while (entry = readdir(dp))
{
if (entry->d_type == DT_REG)
printf("%s\t%d\n", entry->d_name, entry->d_fileno);
}
break;
default:
printf("Bad Command!!");
break;
}
closedir(dp);
}

int main()
{
int pid;
char ch;
char buff[80], *args[10];
printf("myshell$ ");
fflush(stdin);
fgets(buff, 80, stdin);
buff[strlen(buff) - 1] = '\0';
mk_token(buff, args);
if (strcmp(args[0], "count") == 0)
count(args[2], args[1][0]);
else if (strcmp(args[0], "list") == 0)
list(args[2], args[1][0]);
else if (strcmp(args[0], "typeline") == 0)
typeline(args[2], args[1]);
else
{
if (execvp(args[0], args) == -1)
printf("Command Not Found!!\nPlease Enter Proper Command....\n");
}
return 0;
}












Q2
#include <stdio.h>
int
main()
{

int n;
printf("Enter Total Number of Processes:");
scanf("%d", &n);
int wait_time = 0, ta_time = 0, arr_time[n], burst_time[n], temp_burst_time[n];
int x = n;

for (int i = 0; i < n; i++)
{
printf("Enter Details of Process %d \n", i + 1);
printf("Arrival Time:  ");
scanf("%d", &arr_time[i]);
printf("Burst Time:   ");
scanf("%d", &burst_time[i]);
temp_burst_time[i] = burst_time[i];
}

int time_slot;
printf("Enter Time Slot:");
scanf("%d", &time_slot);

int total = 0, counter = 0, i;
printf("Process ID       Burst Time       Turnaround Time      Waiting Time\n");
for (total = 0, i = 0; x != 0;)
{

if (temp_burst_time[i] <= time_slot && temp_burst_time[i] > 0)
{
total = total + temp_burst_time[i];
temp_burst_time[i] = 0;
counter = 1;
}
else if (temp_burst_time[i] > 0)
{
temp_burst_time[i] = temp_burst_time[i] - time_slot;
total += time_slot;
}
if (temp_burst_time[i] == 0 && counter == 1)
{
x--;
printf("\nProcess No %d  \t\t %d\t\t\t\t %d\t\t\t %d", i + 1, burst_time[i],
total - arr_time[i], total - arr_time[i] - burst_time[i]);
wait_time = wait_time + total - arr_time[i] - burst_time[i];
ta_time += total - arr_time[i];
counter = 0;
}
if (i == n - 1)
{
i = 0;
}
else if (arr_time[i + 1] <= total)
{
i++;
}
else
{
i = 0;
}
}
float average_wait_time = wait_time * 1.0 / n;
float average_turnaround_time = ta_time * 1.0 / n;
printf("\nAverage Waiting Time:%f", average_wait_time);
printf("\nAvg Turnaround Time:%f", average_turnaround_time);
return 0;
}
